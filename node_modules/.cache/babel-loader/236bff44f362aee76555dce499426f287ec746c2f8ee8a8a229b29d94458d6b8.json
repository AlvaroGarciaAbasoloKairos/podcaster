{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst usePodcasts = () => {\n  _s();\n  const [podcasts, setPodcasts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fetchPodcasts = async () => {\n    // Check if podcasts are already stored in localStorage\n    const storedPodcasts = localStorage.getItem('podcasts');\n    const storedDate = Number(localStorage.getItem('podcastsUpdatedAt'));\n    // If the podcasts have already been stored and no more than one day has passed, retrieve them from localStorage.\n    if (storedPodcasts && storedDate && Date.now() - storedDate < 86400000) {\n      setPodcasts(JSON.parse(storedPodcasts));\n      return;\n    }\n    // Make request to get the updated list of podcasts.\n    setLoading(true);\n    try {\n      const resp = await fetch('https://itunes.apple.com/us/rss/toppodcasts/limit=100/genre=1310/json');\n      const topPodcastsResponse = await resp.json();\n      const entries = topPodcastsResponse.feed.entry;\n      const podcastsArray = entries ? entries.map(entry => ({\n        id: entry.id.attributes['im:id'],\n        title: entry['im:name'].label,\n        author: entry['im:artist'].label,\n        image: entry['im:image'][2].label,\n        url: entry.link.attributes.href\n      })) : [];\n      setPodcasts(podcastsArray);\n      localStorage.setItem('podcasts', JSON.stringify(podcastsArray));\n      localStorage.setItem('podcastsUpdatedAt', String(Date.now()));\n    } catch (err) {\n      console.trace(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchPodcasts();\n  }, []);\n  return {\n    podcasts,\n    loading\n  };\n};\n_s(usePodcasts, \"ZldMDAkwimE2Qqx2/a9SCYdl64g=\");\nexport default usePodcasts;","map":{"version":3,"names":["useState","useEffect","usePodcasts","_s","podcasts","setPodcasts","loading","setLoading","fetchPodcasts","storedPodcasts","localStorage","getItem","storedDate","Number","Date","now","JSON","parse","resp","fetch","topPodcastsResponse","json","entries","feed","entry","podcastsArray","map","id","attributes","title","label","author","image","url","link","href","setItem","stringify","String","err","console","trace"],"sources":["/Users/alvarokairosds/Repositorios/podcaster/src/lib/usePodcasts.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\ninterface Podcast {\n\tid: string;\n\ttitle: string;\n\tauthor: string;\n\timage: string;\n\turl: string;\n}\n\ninterface PodcastEntry {\n  id: {\n    attributes: {\n      [\"im:id\"]: string;\n      label: string;\n    },\n    label: string;\n  };\n  link: {\n    attributes: {\n      type: string;\n      href: string;\n      rel: string;\n    }\n  };\n  [\"im:name\"]: {\n    label: string\n  };\n  [\"im:artist\"]: {\n    label: string;\n    attributes: { href: string };\n  };\n  [\"im:image\"]: {\n    attributes: { height: string };\n    label: string;\n  }[];\n}\n\ninterface TopPodcastsResponse {\n\tfeed: {\n\t\tauthor: {\n\t\t\tname: { label: string };\n\t\t\turl: { label: string };\n\t\t},\n\t\tentry: PodcastEntry[];\n\t\ticon: { label: string };\n\t\tid: { label: string };\n\t\tlink: {\n\t\t\tattributes: {\n\t\t\t\thref: string;\n\t\t\t\trel: string;\n\t\t\t\ttype: string;\n\t\t\t};\n\t\t};\n\t\trights: { label: string };\n\t\ttitle: { label: string };\n\t\tupdated: { label: string };\n\t}\n}\n\nconst usePodcasts = (): {\n\tpodcasts: Podcast[];\n\tloading: boolean;\n} => {\n\tconst [podcasts, setPodcasts] = useState<Podcast[]>([]);\n\tconst [loading, setLoading] = useState<boolean>(false);\n\n\tconst fetchPodcasts = async () => {\n\t\t// Check if podcasts are already stored in localStorage\n\t\tconst storedPodcasts = localStorage.getItem('podcasts');\n\t\tconst storedDate = Number(localStorage.getItem('podcastsUpdatedAt'));\n\t\t// If the podcasts have already been stored and no more than one day has passed, retrieve them from localStorage.\n\t\tif (storedPodcasts && storedDate && Date.now() - storedDate < 86400000) {\n\t\t\tsetPodcasts(JSON.parse(storedPodcasts));\n\t\t\treturn;\n\t\t}\n\t\t// Make request to get the updated list of podcasts.\n\t\tsetLoading(true);\n\t\ttry {\n\t\t\tconst resp = await fetch(\n\t\t\t\t'https://itunes.apple.com/us/rss/toppodcasts/limit=100/genre=1310/json',\n\t\t\t);\n\t\t\tconst topPodcastsResponse: TopPodcastsResponse = await resp.json();\n\t\t\tconst entries = topPodcastsResponse.feed.entry;\n\t\t\tconst podcastsArray = entries\n\t\t\t\t? entries.map((entry) => ({\n\t\t\t\t\tid: entry.id.attributes['im:id'],\n\t\t\t\t\ttitle: entry['im:name'].label,\n\t\t\t\t\tauthor: entry['im:artist'].label,\n\t\t\t\t\timage: entry['im:image'][2].label,\n\t\t\t\t\turl: entry.link.attributes.href,\n\t\t\t\t}))\n\t\t\t\t: [];\n\t\t\tsetPodcasts(podcastsArray);\n\t\t\tlocalStorage.setItem('podcasts', JSON.stringify(podcastsArray));\n\t\t\tlocalStorage.setItem('podcastsUpdatedAt', String(Date.now()));\n\t\t} catch (err) {\n\t\t\tconsole.trace(err);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tfetchPodcasts();\n\t}, []);\n\n\treturn { podcasts, loading };\n};\n\nexport default usePodcasts;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AA4D3C,MAAMC,WAAW,GAAGA,CAAA,KAGf;EAAAC,EAAA;EACJ,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAY,EAAE,CAAC;EACvD,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAU,KAAK,CAAC;EAEtD,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;IACjC;IACA,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,MAAMC,UAAU,GAAGC,MAAM,CAACH,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACpE;IACA,IAAIF,cAAc,IAAIG,UAAU,IAAIE,IAAI,CAACC,GAAG,EAAE,GAAGH,UAAU,GAAG,QAAQ,EAAE;MACvEP,WAAW,CAACW,IAAI,CAACC,KAAK,CAACR,cAAc,CAAC,CAAC;MACvC;IACD;IACA;IACAF,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACH,MAAMW,IAAI,GAAG,MAAMC,KAAK,CACvB,uEAAuE,CACvE;MACD,MAAMC,mBAAwC,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;MAClE,MAAMC,OAAO,GAAGF,mBAAmB,CAACG,IAAI,CAACC,KAAK;MAC9C,MAAMC,aAAa,GAAGH,OAAO,GAC1BA,OAAO,CAACI,GAAG,CAAEF,KAAK,KAAM;QACzBG,EAAE,EAAEH,KAAK,CAACG,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC;QAChCC,KAAK,EAAEL,KAAK,CAAC,SAAS,CAAC,CAACM,KAAK;QAC7BC,MAAM,EAAEP,KAAK,CAAC,WAAW,CAAC,CAACM,KAAK;QAChCE,KAAK,EAAER,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAACM,KAAK;QACjCG,GAAG,EAAET,KAAK,CAACU,IAAI,CAACN,UAAU,CAACO;MAC5B,CAAC,CAAC,CAAC,GACD,EAAE;MACL9B,WAAW,CAACoB,aAAa,CAAC;MAC1Bf,YAAY,CAAC0B,OAAO,CAAC,UAAU,EAAEpB,IAAI,CAACqB,SAAS,CAACZ,aAAa,CAAC,CAAC;MAC/Df,YAAY,CAAC0B,OAAO,CAAC,mBAAmB,EAAEE,MAAM,CAACxB,IAAI,CAACC,GAAG,EAAE,CAAC,CAAC;IAC9D,CAAC,CAAC,OAAOwB,GAAG,EAAE;MACbC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IACnB,CAAC,SAAS;MACThC,UAAU,CAAC,KAAK,CAAC;IAClB;EACD,CAAC;EAEDN,SAAS,CAAC,MAAM;IACfO,aAAa,EAAE;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEJ,QAAQ;IAAEE;EAAQ,CAAC;AAC7B,CAAC;AAACH,EAAA,CAhDID,WAAW;AAkDjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}